(()=>{const t=1,e="truthseo-snapshot-ready";function n(){const n=new URL(location.href).searchParams.has("truthseo-snapshot");var o,r;n&&(console.log(`[TruthSEO v${t}] Snapshot script initialized`),console.log(`[TruthSEO v${t}] Current URL:`,location.href),console.log(`[TruthSEO v${t}] Snapshot param detected:`,n),console.log(`[TruthSEO v${t}] Snapshot mode activated. Looking for element: <${e}>`),(o=e,r=1e4,new Promise(((e,n)=>{console.log(`[TruthSEO v${t}] Checking DOM for <${o}>...`);let s=!1;const i=document.querySelector(`${o}:not([data-truthseo-processed="true"])`);if(i)return console.log(`[TruthSEO v${t}] Element already present:`,i),void e();console.log(`[TruthSEO v${t}] Element not found. Setting up MutationObserver and polling...`);const a=new MutationObserver((()=>{const n=document.querySelector(`${o}:not([data-truthseo-processed="true"])`);n&&(console.log(`[TruthSEO v${t}] Element found via MutationObserver:`,n),u(),e())})),c=setInterval((()=>{const n=document.querySelector(`${o}:not([data-truthseo-processed="true"])`);n&&(console.log(`[TruthSEO v${t}] Element found via polling:`,n),u(),e())}),100),l=setTimeout((()=>{s||(console.warn(`[TruthSEO v${t}] Timeout waiting for <${o}>.`),u(),n("Element timeout"))}),r);function u(){s||(s=!0,a.disconnect(),clearInterval(c),clearTimeout(l))}a.observe(document.documentElement,{childList:!0,subtree:!0})}))).then((()=>{console.log(`[TruthSEO v${t}] Custom element detected — capturing HTML...`);const n=document.documentElement.outerHTML,o=document.querySelector(e);o&&(o.setAttribute("data-truthseo-processed","true"),o.style.display="none");const r=function(t){try{const e=(new DOMParser).parseFromString(t,"text/html"),n=e.head,o=e.body;n.querySelectorAll('script[type="application/ld+json"]').forEach((t=>t.remove()));n.querySelectorAll("title").forEach((t=>t.remove()));n.querySelectorAll('link[rel="canonical"]').forEach((t=>t.remove()));n.querySelectorAll("meta").forEach((t=>{const e=t.getAttribute("name")?.toLowerCase(),n=t.getAttribute("http-equiv");t.getAttribute("charset")||n||"viewport"===e||t.remove()}));const r=e.createElement("meta");r.setAttribute("name","truthseo:snapshot-version"),r.setAttribute("content","9"),n.insertBefore(r,n.querySelector("base")||n.firstChild);const s=e.querySelector("truthseo-snapshot-ready");if(s){const t=s.innerHTML.trim();if(t.length>0){n.appendChild(e.createTextNode("\n")),n.appendChild(e.createComment(" TruthSEO-Snapshot ")),n.appendChild(e.createTextNode("\n"));const o=e.createElement("div");o.innerHTML=t,Array.from(o.childNodes).forEach((t=>{n.appendChild(t)})),n.appendChild(e.createTextNode("\n")),n.appendChild(e.createComment(" TruthSEO-Snapshot-Done ")),n.appendChild(e.createTextNode("\n"))}s.remove()}const i=e.createElement("script");return i.setAttribute("id","truthorigin-snapshot"),i.setAttribute("data-version","9"),i.innerHTML='\n(() => {\n  console.log("[TruthOrigin] Snapshot validator activated.");\n  const localScript = document.getElementById("truthorigin-snapshot");\n  const snapshotVersion = localScript?.getAttribute("data-version")?.trim();\n  const controller = new AbortController();\n  setTimeout(() => controller.abort(), 10 * 60 * 1000);\n\n  fetch("/index.html", {\n    signal: controller.signal,\n    cache: "no-cache"\n  })\n    .then(response => {\n      if (!response.ok) throw new Error("Failed to fetch root index.html");\n      return response.text();\n    })\n    .then(html => {\n      const tempDom = document.createElement("html");\n      tempDom.innerHTML = html;\n      const rootScript = tempDom.querySelector(\'#truthorigin-snapshot\');\n      if (!rootScript) {\n        console.warn("[TruthOrigin] Root index.html missing config script — skipping validation.");\n        return;\n      }\n\n      const rootVersion = rootScript.getAttribute("data-version")?.trim();\n      const forceOriginAttr = rootScript.getAttribute("data-force-origin")?.trim();\n      const forceOrigin = forceOriginAttr === "true";\n\n      if (forceOrigin) {\n        const route = encodeURIComponent(location.pathname);\n        console.log("[TruthOrigin] forceOrigin=true — redirecting to origin.");\n        location.replace(`/?route=${route}`);\n        return;\n      }\n\n      if (!rootVersion) {\n        console.warn("[TruthOrigin] Root version missing — skipping version check.");\n        return;\n      }\n\n      if (!snapshotVersion) {\n        console.warn("[TruthOrigin] No snapshot version found — skipping validation.");\n        return;\n      }\n\n      if (snapshotVersion !== rootVersion) {\n        const route = encodeURIComponent(location.pathname);\n        console.log(`[TruthOrigin] Version mismatch — snapshot=${snapshotVersion}, root=${rootVersion}. Redirecting.`);\n        location.replace(`/?route=${route}`);\n      } else {\n        console.log(`[TruthOrigin] Snapshot is current (v${snapshotVersion}).`);\n      }\n    })\n    .catch(err => {\n      if (err.name === "AbortError") {\n        console.warn("[TruthOrigin] Fetch timeout — skipping root version check.");\n      } else {\n        console.warn("[TruthOrigin] Snapshot validator error — continuing anyway.", err);\n      }\n    });\n})();\n        '.trim(),o.appendChild(i),"<!DOCTYPE html>\n"+e.documentElement.outerHTML}catch(e){return console.error("Failed to sanitize snapshot:",e),t}}(n);console.log(`[TruthSEO v${t}] HTML captured. Length:`,r.length),function(e){try{const n="*";console.log(`[TruthSEO v${t}] Sending snapshot via postMessage...`),window.parent.postMessage({type:"truthseo:snapshot",html:e},n),console.log(`[TruthSEO v${t}] postMessage sent successfully.`)}catch(e){console.error(`[TruthSEO v${t}] postMessage failed:`,e)}}(r)})).catch((e=>{console.warn(`[TruthSEO v${t}] Snapshot aborted. Reason:`,e)})))}window.addEventListener("message",(e=>{"truthseo:navigate"===e?.data?.type&&(console.log(`[TruthSEO v${t}] Received navigate request. Rerunning snapshot check.`),setTimeout(n,50))})),window.addEventListener("message",(e=>{if(!e?.data||"truthseo:navigate"!==e.data.type)return;const n=e.data.targetPath;"string"==typeof n&&window.location.pathname+window.location.search!==n&&(console.log(`[TruthSEO v${t}] Navigating to route:`,n),history.pushState({},"",n),window.dispatchEvent(new PopStateEvent("popstate")))})),n();const o=document.createComment(`truthseo-snapshot-script-version: ${t}`);document.documentElement.appendChild(o)})(),(()=>{const t=new URL(location.href).searchParams.get("route");if(t){const e=decodeURIComponent(t),n=e+location.hash;window.history.replaceState(null,"",n);const o=()=>{console.log(`[TruthOrigin] Soft routing to preserved target route: ${e}`),window.history.pushState({},"",e),window.dispatchEvent(new PopStateEvent("popstate"))};"complete"===document.readyState?setTimeout(o,100):window.addEventListener("load",(()=>setTimeout(o,100)))}})();